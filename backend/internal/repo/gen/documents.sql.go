// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: documents.sql

package db

import (
	"context"
)

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT source, document, surah, ayah FROM rag.documents
WHERE id = $1
`

type GetDocumentByIDRow struct {
	Source   RagSource    `db:"source"`
	Document string       `db:"document"`
	Surah    NullRagSurah `db:"surah"`
	Ayah     NullRagAyah  `db:"ayah"`
}

func (q *Queries) GetDocumentByID(ctx context.Context, id int32) (GetDocumentByIDRow, error) {
	row := q.db.QueryRow(ctx, getDocumentByID, id)
	var i GetDocumentByIDRow
	err := row.Scan(
		&i.Source,
		&i.Document,
		&i.Surah,
		&i.Ayah,
	)
	return i, err
}

const getDocumentByKey = `-- name: GetDocumentByKey :one
SELECT id, source, document FROM rag.documents
WHERE surah = $1 AND ayah = $2
`

type GetDocumentByKeyParams struct {
	Surah NullRagSurah `db:"surah"`
	Ayah  NullRagAyah  `db:"ayah"`
}

type GetDocumentByKeyRow struct {
	ID       int32     `db:"id"`
	Source   RagSource `db:"source"`
	Document string    `db:"document"`
}

func (q *Queries) GetDocumentByKey(ctx context.Context, arg GetDocumentByKeyParams) (GetDocumentByKeyRow, error) {
	row := q.db.QueryRow(ctx, getDocumentByKey, arg.Surah, arg.Ayah)
	var i GetDocumentByKeyRow
	err := row.Scan(&i.ID, &i.Source, &i.Document)
	return i, err
}
