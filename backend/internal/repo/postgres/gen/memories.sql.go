// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: memories.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMemory = `-- name: CreateMemory :one
INSERT INTO memories (user_id, memory)
VALUES ($1, $2)
RETURNING id, user_id, created_at, updated_at, memory
`

type CreateMemoryParams struct {
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Memory string      `db:"memory" json:"memory"`
}

func (q *Queries) CreateMemory(ctx context.Context, arg CreateMemoryParams) (Memory, error) {
	row := q.db.QueryRow(ctx, createMemory, arg.UserID, arg.Memory)
	var i Memory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Memory,
	)
	return i, err
}

const getMemoriesByUserID = `-- name: GetMemoriesByUserID :many
SELECT id, user_id, created_at, updated_at, memory FROM memories
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetMemoriesByUserIDParams struct {
	UserID           pgtype.UUID `db:"user_id" json:"user_id"`
	NumberOfMemories int32       `db:"number_of_memories" json:"number_of_memories"`
}

func (q *Queries) GetMemoriesByUserID(ctx context.Context, arg GetMemoriesByUserIDParams) ([]Memory, error) {
	rows, err := q.db.Query(ctx, getMemoriesByUserID, arg.UserID, arg.NumberOfMemories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Memory{}
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Memory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemoryByID = `-- name: GetMemoryByID :one
SELECT id, user_id, created_at, updated_at, memory FROM memories
WHERE id = $1
`

func (q *Queries) GetMemoryByID(ctx context.Context, id int32) (Memory, error) {
	row := q.db.QueryRow(ctx, getMemoryByID, id)
	var i Memory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Memory,
	)
	return i, err
}

const updateMemoryByID = `-- name: UpdateMemoryByID :one
UPDATE memories
SET memory = $1,
    updated_at = now()
WHERE id = $2
RETURNING id, user_id, created_at, updated_at, memory
`

type UpdateMemoryByIDParams struct {
	Memory string `db:"memory" json:"memory"`
	ID     int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateMemoryByID(ctx context.Context, arg UpdateMemoryByIDParams) (Memory, error) {
	row := q.db.QueryRow(ctx, updateMemoryByID, arg.Memory, arg.ID)
	var i Memory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Memory,
	)
	return i, err
}
