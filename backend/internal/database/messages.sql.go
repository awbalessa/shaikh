// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (session_id, user_id, role, content, model, token_count)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, session_id, user_id, created_at, role, content, model, token_count
`

type CreateMessageParams struct {
	SessionID  pgtype.UUID
	UserID     pgtype.UUID
	Role       MessagesRole
	Content    string
	Model      MessagesModel
	TokenCount pgtype.Int4
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.SessionID,
		arg.UserID,
		arg.Role,
		arg.Content,
		arg.Model,
		arg.TokenCount,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.Role,
		&i.Content,
		&i.Model,
		&i.TokenCount,
	)
	return i, err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, session_id, user_id, created_at, role, content, model, token_count FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.Role,
		&i.Content,
		&i.Model,
		&i.TokenCount,
	)
	return i, err
}

const getMessagesBySessionID = `-- name: GetMessagesBySessionID :many
SELECT id, session_id, user_id, created_at, role, content, model, token_count FROM messages
WHERE session_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMessagesBySessionID(ctx context.Context, sessionID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Content,
			&i.Model,
			&i.TokenCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserMessagesByUserID = `-- name: GetUserMessagesByUserID :many
SELECT m.id, m.session_id, m.user_id, m.created_at, m.role, m.content, m.model, m.token_count
FROM messages m
JOIN sessions s ON m.session_id = s.id
WHERE m.user_id = $1
  AND m.role = 'user'::messages_role
ORDER BY s.updated_at DESC, m.created_at DESC
LIMIT $2
`

type GetUserMessagesByUserIDParams struct {
	UserID           pgtype.UUID
	NumberOfMessages int32
}

func (q *Queries) GetUserMessagesByUserID(ctx context.Context, arg GetUserMessagesByUserIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getUserMessagesByUserID, arg.UserID, arg.NumberOfMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Content,
			&i.Model,
			&i.TokenCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
