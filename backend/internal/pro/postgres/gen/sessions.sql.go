// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id)
VALUES ($1, $2)
RETURNING id, user_id, created_at, updated_at, ended_at, max_turn, summary
`

type CreateSessionParams struct {
	ID     uuid.UUID `db:"id"`
	UserID uuid.UUID `db:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EndedAt,
		&i.MaxTurn,
		&i.Summary,
	)
	return i, err
}

const getMaxTurnByID = `-- name: GetMaxTurnByID :one
SELECT max_turn FROM sessions
WHERE id = $1
`

func (q *Queries) GetMaxTurnByID(ctx context.Context, id uuid.UUID) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getMaxTurnByID, id)
	var max_turn pgtype.Int4
	err := row.Scan(&max_turn)
	return max_turn, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, created_at, updated_at, ended_at, max_turn, summary FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EndedAt,
		&i.MaxTurn,
		&i.Summary,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, user_id, created_at, updated_at, ended_at, max_turn, summary FROM sessions
WHERE user_id = $1
ORDER BY updated_at DESC
LIMIT $2
`

type GetSessionsByUserIDParams struct {
	UserID           uuid.UUID `db:"user_id"`
	NumberOfSessions int64     `db:"number_of_sessions"`
}

func (q *Queries) GetSessionsByUserID(ctx context.Context, arg GetSessionsByUserIDParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getSessionsByUserID, arg.UserID, arg.NumberOfSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EndedAt,
			&i.MaxTurn,
			&i.Summary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionByID = `-- name: UpdateSessionByID :one
UPDATE sessions
SET updated_at = $1, ended_at = $2, max_turn = $3, summary = $4
WHERE id = $5
RETURNING id, user_id, created_at, updated_at, ended_at, max_turn, summary
`

type UpdateSessionByIDParams struct {
	UpdatedAt time.Time   `db:"updated_at"`
	EndedAt   time.Time   `db:"ended_at"`
	MaxTurn   pgtype.Int4 `db:"max_turn"`
	Summary   pgtype.Text `db:"summary"`
	ID        uuid.UUID   `db:"id"`
}

func (q *Queries) UpdateSessionByID(ctx context.Context, arg UpdateSessionByIDParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionByID,
		arg.UpdatedAt,
		arg.EndedAt,
		arg.MaxTurn,
		arg.Summary,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EndedAt,
		&i.MaxTurn,
		&i.Summary,
	)
	return i, err
}
