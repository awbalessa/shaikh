// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email)
VALUES ($1, $2)
RETURNING id, email, created_at, updated_at, total_messages, total_messages_memorized
`

type CreateUserParams struct {
	ID    uuid.UUID `db:"id"`
	Email string    `db:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, created_at, updated_at, total_messages, total_messages_memorized FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const incrementUserMessagesByID = `-- name: IncrementUserMessagesByID :one
UPDATE users
SET total_messages = total_messages + $1,
    total_messages_memorized = total_messages_memorized + $2,
    updated_at = $3
WHERE id = $4
RETURNING id, email, created_at, updated_at, total_messages, total_messages_memorized
`

type IncrementUserMessagesByIDParams struct {
	TotalMessages          int32     `db:"total_messages"`
	TotalMessagesMemorized int32     `db:"total_messages_memorized"`
	UpdatedAt              time.Time `db:"updated_at"`
	ID                     uuid.UUID `db:"id"`
}

func (q *Queries) IncrementUserMessagesByID(ctx context.Context, arg IncrementUserMessagesByIDParams) (User, error) {
	row := q.db.QueryRow(ctx, incrementUserMessagesByID,
		arg.TotalMessages,
		arg.TotalMessagesMemorized,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const listWithBacklog = `-- name: ListWithBacklog :many
SELECT id, email, created_at, updated_at, total_messages, total_messages_memorized FROM users
WHERE total_messages > total_messages_memorized
`

func (q *Queries) ListWithBacklog(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listWithBacklog)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalMessages,
			&i.TotalMessagesMemorized,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
