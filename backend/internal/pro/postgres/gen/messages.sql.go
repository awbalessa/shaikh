// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (session_id, user_id, role, model, turn, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, session_id, user_id, created_at, role, turn, model, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response
`

type CreateMessageParams struct {
	SessionID         uuid.UUID              `db:"session_id"`
	UserID            uuid.UUID              `db:"user_id"`
	Role              MessagesRole           `db:"role"`
	Model             NullLargeLanguageModel `db:"model"`
	Turn              int32                  `db:"turn"`
	TotalInputTokens  pgtype.Int4            `db:"total_input_tokens"`
	TotalOutputTokens pgtype.Int4            `db:"total_output_tokens"`
	Content           pgtype.Text            `db:"content"`
	FunctionName      pgtype.Text            `db:"function_name"`
	FunctionCall      json.RawMessage        `db:"function_call"`
	FunctionResponse  json.RawMessage        `db:"function_response"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.SessionID,
		arg.UserID,
		arg.Role,
		arg.Model,
		arg.Turn,
		arg.TotalInputTokens,
		arg.TotalOutputTokens,
		arg.Content,
		arg.FunctionName,
		arg.FunctionCall,
		arg.FunctionResponse,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.Role,
		&i.Turn,
		&i.Model,
		&i.TotalInputTokens,
		&i.TotalOutputTokens,
		&i.Content,
		&i.FunctionName,
		&i.FunctionCall,
		&i.FunctionResponse,
	)
	return i, err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, session_id, user_id, created_at, role, turn, model, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.Role,
		&i.Turn,
		&i.Model,
		&i.TotalInputTokens,
		&i.TotalOutputTokens,
		&i.Content,
		&i.FunctionName,
		&i.FunctionCall,
		&i.FunctionResponse,
	)
	return i, err
}

const getMessagesBySessionID = `-- name: GetMessagesBySessionID :many
SELECT id, session_id, user_id, created_at, role, turn, model, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response FROM messages
WHERE session_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMessagesBySessionID(ctx context.Context, sessionID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Turn,
			&i.Model,
			&i.TotalInputTokens,
			&i.TotalOutputTokens,
			&i.Content,
			&i.FunctionName,
			&i.FunctionCall,
			&i.FunctionResponse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySessionIDAsc = `-- name: GetMessagesBySessionIDAsc :many
SELECT id, session_id, user_id, created_at, role, turn, model, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response FROM messages
WHERE session_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesBySessionIDAsc(ctx context.Context, sessionID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySessionIDAsc, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Turn,
			&i.Model,
			&i.TotalInputTokens,
			&i.TotalOutputTokens,
			&i.Content,
			&i.FunctionName,
			&i.FunctionCall,
			&i.FunctionResponse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySessionIdOrdered = `-- name: GetMessagesBySessionIdOrdered :many
SELECT id, session_id, user_id, created_at, role, turn, model, total_input_tokens, total_output_tokens, content, function_name, function_call, function_response FROM messages
WHERE session_id = $1
ORDER BY turn ASC
`

func (q *Queries) GetMessagesBySessionIdOrdered(ctx context.Context, sessionID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySessionIdOrdered, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Turn,
			&i.Model,
			&i.TotalInputTokens,
			&i.TotalOutputTokens,
			&i.Content,
			&i.FunctionName,
			&i.FunctionCall,
			&i.FunctionResponse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserMessagesByUserID = `-- name: GetUserMessagesByUserID :many
SELECT m.id, m.session_id, m.user_id, m.created_at, m.role, m.turn, m.model, m.total_input_tokens, m.total_output_tokens, m.content, m.function_name, m.function_call, m.function_response
FROM messages m
JOIN sessions s ON m.session_id = s.id
WHERE m.user_id = $1
  AND m.role = 'user'::messages_role
ORDER BY s.updated_at DESC, m.created_at DESC
LIMIT $2
`

type GetUserMessagesByUserIDParams struct {
	UserID           uuid.UUID `db:"user_id"`
	NumberOfMessages int64     `db:"number_of_messages"`
}

func (q *Queries) GetUserMessagesByUserID(ctx context.Context, arg GetUserMessagesByUserIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getUserMessagesByUserID, arg.UserID, arg.NumberOfMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.CreatedAt,
			&i.Role,
			&i.Turn,
			&i.Model,
			&i.TotalInputTokens,
			&i.TotalOutputTokens,
			&i.Content,
			&i.FunctionName,
			&i.FunctionCall,
			&i.FunctionResponse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
