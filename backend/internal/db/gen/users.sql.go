// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, is_admin)
VALUES ($1, $2, $3, $4)
RETURNING id, email, password_hash, is_admin, created_at, updated_at, total_messages, total_messages_memorized
`

type CreateUserParams struct {
	ID           uuid.UUID `db:"id"`
	Email        string    `db:"email"`
	PasswordHash string    `db:"password_hash"`
	IsAdmin      bool      `db:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, is_admin, created_at, updated_at, total_messages, total_messages_memorized FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, is_admin, created_at, updated_at, total_messages, total_messages_memorized FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const incrementUserMessagesByID = `-- name: IncrementUserMessagesByID :one
UPDATE users
SET total_messages = total_messages + $1,
    total_messages_memorized = total_messages_memorized + $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, email, password_hash, is_admin, created_at, updated_at, total_messages, total_messages_memorized
`

type IncrementUserMessagesByIDParams struct {
	DeltaMessages          int32     `db:"delta_messages"`
	DeltaMessagesMemorized int32     `db:"delta_messages_memorized"`
	ID                     uuid.UUID `db:"id"`
}

func (q *Queries) IncrementUserMessagesByID(ctx context.Context, arg IncrementUserMessagesByIDParams) (User, error) {
	row := q.db.QueryRow(ctx, incrementUserMessagesByID, arg.DeltaMessages, arg.DeltaMessagesMemorized, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalMessages,
		&i.TotalMessagesMemorized,
	)
	return i, err
}

const listUsersWithBacklog = `-- name: ListUsersWithBacklog :many
SELECT id, email, password_hash, is_admin, created_at, updated_at, total_messages, total_messages_memorized FROM users
WHERE total_messages > total_messages_memorized
`

func (q *Queries) ListUsersWithBacklog(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersWithBacklog)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalMessages,
			&i.TotalMessagesMemorized,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
