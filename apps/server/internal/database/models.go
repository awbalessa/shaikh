// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	pgvector_go "github.com/pgvector/pgvector-go"
)

type ContentType string

const (
	ContentTypeQuran   ContentType = "quran"
	ContentTypeTafseer ContentType = "tafseer"
)

func (e *ContentType) Scan(src any) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType
	Valid       bool // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner anyfunc (ns *NullContentType) Scan(value any) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type Granularity string

const (
	GranularityWord  Granularity = "word"
	GranularityAyah  Granularity = "ayah"
	GranularitySurah Granularity = "surah"
	GranularityQuran Granularity = "quran"
)

func (e *Granularity) Scan(src any) error {
	switch s := src.(type) {
	case []byte:
		*e = Granularity(s)
	case string:
		*e = Granularity(s)
	default:
		return fmt.Errorf("unsupported scan type for Granularity: %T", src)
	}
	return nil
}

type NullGranularity struct {
	Granularity Granularity
	Valid       bool // Valid is true if Granularity is not NULL
}

// Scan implements the Scanner anyfunc (ns *NullGranularity) Scan(value any) error {
	if value == nil {
		ns.Granularity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Granularity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGranularity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Granularity), nil
}

type Lang string

const (
	LangAr Lang = "ar"
	LangEn Lang = "en"
)

func (e *Lang) Scan(src any) error {
	switch s := src.(type) {
	case []byte:
		*e = Lang(s)
	case string:
		*e = Lang(s)
	default:
		return fmt.Errorf("unsupported scan type for Lang: %T", src)
	}
	return nil
}

type NullLang struct {
	Lang  Lang
	Valid bool // Valid is true if Lang is not NULL
}

// Scan implements the Scanner anyfunc (ns *NullLang) Scan(value any) error {
	if value == nil {
		ns.Lang, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Lang.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLang) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Lang), nil
}

type LiteratureSource string

const (
	LiteratureSourceQuran      LiteratureSource = "Quran"
	LiteratureSourceIbnKathir  LiteratureSource = "Ibn Kathir"
	LiteratureSourceAlTabari   LiteratureSource = "Al Tabari"
	LiteratureSourceAlQurtubi  LiteratureSource = "Al Qurtubi"
	LiteratureSourceAlBaghawi  LiteratureSource = "Al Baghawi"
	LiteratureSourceAlSaadi    LiteratureSource = "Al Saadi"
	LiteratureSourceAlMuyassar LiteratureSource = "Al Muyassar"
	LiteratureSourceAlWasit    LiteratureSource = "Al Wasit"
	LiteratureSourceAlJalalayn LiteratureSource = "Al Jalalayn"
)

func (e *LiteratureSource) Scan(src any) error {
	switch s := src.(type) {
	case []byte:
		*e = LiteratureSource(s)
	case string:
		*e = LiteratureSource(s)
	default:
		return fmt.Errorf("unsupported scan type for LiteratureSource: %T", src)
	}
	return nil
}

type NullLiteratureSource struct {
	LiteratureSource LiteratureSource
	Valid            bool // Valid is true if LiteratureSource is not NULL
}

// Scan implements the Scanner anyfunc (ns *NullLiteratureSource) Scan(value any) error {
	if value == nil {
		ns.LiteratureSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LiteratureSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLiteratureSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LiteratureSource), nil
}

type Embedding struct {
	ID               int64
	CreatedAt        pgtype.Timestamp
	Granularity      Granularity
	ContentType      ContentType
	RawContent       string
	EmbeddedContent  string
	Lang             Lang
	LiteratureSource LiteratureSource
	EmbeddingTitle   string
	Embedding        pgvector_go.Vector
	Metadata         []byte
}
