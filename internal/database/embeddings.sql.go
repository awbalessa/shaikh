// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: embeddings.sql

package database

import (
	"context"

	pgvector_go "github.com/pgvector/pgvector-go"
)

const createEmbedding = `-- name: CreateEmbedding :one
INSERT INTO
    embeddings (
        created_at,
        granularity,
        content_type,
        content,
        lang,
        literature_source,
        embedding_title,
        embedding,
        metadata
    )
VALUES
    (NOW (), $1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, granularity, content_type, content, lang, literature_source, embedding_title, embedding, metadata
`

type CreateEmbeddingParams struct {
	Granularity      Granularity
	ContentType      ContentType
	Content          string
	Lang             Lang
	LiteratureSource LiteratureSource
	EmbeddingTitle   string
	Embedding        pgvector_go.Vector
	Metadata         []byte
}

func (q *Queries) CreateEmbedding(ctx context.Context, arg CreateEmbeddingParams) (Embedding, error) {
	row := q.db.QueryRow(ctx, createEmbedding,
		arg.Granularity,
		arg.ContentType,
		arg.Content,
		arg.Lang,
		arg.LiteratureSource,
		arg.EmbeddingTitle,
		arg.Embedding,
		arg.Metadata,
	)
	var i Embedding
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Granularity,
		&i.ContentType,
		&i.Content,
		&i.Lang,
		&i.LiteratureSource,
		&i.EmbeddingTitle,
		&i.Embedding,
		&i.Metadata,
	)
	return i, err
}

const resetEmbeddings = `-- name: ResetEmbeddings :exec
DELETE FROM embeddings
`

func (q *Queries) ResetEmbeddings(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetEmbeddings)
	return err
}
